@page "/gameOfLife"
@using System.Text
@inject HttpClient Http
@inject Grid Grid;

<h1>Game of life</h1>

@if (_currentGrid == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <div class="btn-group" style="padding-bottom: 30px">
            <div>
                <div class="btn btn-primary" style="padding-right: 5px" onclick="@Tick">Tick</div>
            </div>
            <div>
                <div class="btn btn-primary" style="padding-right: 5px" onclick="@TickMultiple">Ticks</div>
            </div>
            <div>
                <input class ="form-control" type="number" min="0" step="1" bind="@_selectedIteration" />
            </div>
        </div>
    </div>
    <div>
        @(_gridToHtml)
    </div>
}

@functions {

    Grid _currentGrid;
    private MarkupString _gridToHtml;

    protected override void OnInit()
    {
        var initialListOfCells = new List<Cell>
        {
            new Cell(1, 1, CellState.Alive),
            new Cell(1, 2, CellState.Alive),
            new Cell(1, 3, CellState.Alive),
            new Cell(2, 1, CellState.Alive),
            new Cell(2, 2, CellState.Alive),
            new Cell(3, 2, CellState.Alive),
            new Cell(3, 3, CellState.Alive)
        };

        _currentGrid = new Grid(initialListOfCells);
        _gridToHtml = new MarkupString(GridAsHtmlTable());
    }

    private int _selectedIteration;

    void Tick()
    {
        _currentGrid.Tick();
        _gridToHtml = new MarkupString(GridAsHtmlTable());
        ChangeState();
    }

    void ChangeState()
    {
        StateHasChanged();
        Console.WriteLine("State changed");
    }

    void TickMultiple()
    {
        for (var i = 0; i < _selectedIteration; i++)
        {
            Tick();
        }
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("rendered...");
        base.OnAfterRender();
    }

    private string GridAsHtmlTable()
    {
        var sb = new StringBuilder();
        sb.Append("<TABLE border=1>\n");
        var orderedCells = _currentGrid.GetNextGridLiveAndDead().OrderBy(e => e.XAxis);

        var previousXAxis = 0;

        foreach (var cell in orderedCells)
        {
            CreateHtmlCell(cell, previousXAxis, sb);

            previousXAxis = cell.XAxis;
        }

        sb.Append("</TABLE>");

        return sb.ToString();
    }

    private static void CreateHtmlCell(Cell cell, int previousXAxis, StringBuilder sb)
    {
        if (CellIsInSameRowAsPrevious(cell, previousXAxis))
        {
            CreateNewCellOnCurrentRow(sb, cell);
        }
        else
        {
            CreateNewCellOnNewRow(sb, cell);
        }
    }

    private static bool CellIsInSameRowAsPrevious(Cell cell, int previousXAxis)
    {
        return cell.XAxis == previousXAxis;
    }

    private static void CreateNewCellOnNewRow(StringBuilder sb, Cell cell)
    {
        sb.Append("</TR>\n");
        sb.Append("<TR>\n");
        CreateNewCellOnCurrentRow(sb, cell);
    }

    private static void CreateNewCellOnCurrentRow(StringBuilder sb, Cell cell)
    {
        sb.Append(cell.IsAlive()
            ? "<TD width=50px; height=50px; style='background-color:black'></TD>"
            : "<TD width=50px; height=50px></TD>");
    }

    protected override bool ShouldRender()  
    {  
        Console.WriteLine("ShouldRender");  
        return true;  
 
    }  
}
